name: Platform Executable Acceptance Testing
on:
  workflow_dispatch:
  workflow_run:
    # wait for Platform Executable Release to complete
    workflows:
      [
        "Debian Executable Release",
        "Macos Executable Release",
        "Windows Executable Release",
      ]
    branches: [main]
    types:
      - completed

jobs:
  get-branch:
    name: Get Current Branch Name
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  wait-for-releases:
    name: Wait for Platform executables Release to complete
    runs-on: ubuntu-latest
    needs: [get-branch]
    env:
      INPUT_OWNER: twilio
      INPUT_REPO: twilio-cli
      INPUT_GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      INPUT_REF: ${{ needs.get-branch.outputs.branch }}
      INPUT_WAITING_INTERVAL: 10
      INPUT_PROPAGATE_FAILURE: true
      INPUT_TRIGGER_WORKFLOW: false
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - name: Wait for Oclif, Homebrew and Scoop Release
        run: source .github/scripts/trigger-and-wait.sh
        env:
          INPUT_WORKFLOW_FILE_NAME: oclif-release.yml
      - name: Wait for debian executables Release
        run: source .github/scripts/trigger-and-wait.sh
        env:
          INPUT_WORKFLOW_FILE_NAME: debian-executable-release.yml
      - name: Wait for windows executables Release
        run: source .github/scripts/trigger-and-wait.sh
        env:
          INPUT_WORKFLOW_FILE_NAME: windows-executable-release.yml
      - name: Wait for macos executables Release
        run: source .github/scripts/trigger-and-wait.sh
        env:
          INPUT_WORKFLOW_FILE_NAME: macos-executable-release.yml
  get-tag:
    runs-on: ubuntu-latest
    outputs:
      TAG_NAME: ${{steps.get-tag.outputs.TAG_NAME}}
    steps:
      - uses: actions/checkout@v2
      - name: Getting latest tag
        id: get-tag
        run: |
          git fetch --prune --unshallow
          echo "::set-output name=TAG_NAME::$(git describe --tags $(git rev-list --tags --max-count=1))"
  platform-exec-test:
    name: Test for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [get-tag, wait-for-releases]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            extension_type: '.deb'
            cmds_to_execute: sudo dpkg -i twilio-${{ needs.get-tag.outputs.TAG_NAME }}.deb
          - os: macos-latest
            extension_type: '.pkg'
            cmds_to_execute: sudo installer -pkg twilio-${{ needs.get-tag.outputs.TAG_NAME }}.pkg -target ~/
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - name: Perform install and test binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ needs.get-tag.outputs.TAG_NAME }} --pattern '*${{matrix.extension_type}}'
          ${{matrix.cmds_to_execute}}
          ls
          twilio --version
          twilio api --help
  platform-exec-test-Windows:
    name: Test for Windows
    runs-on: windows-latest
    needs: [get-tag]
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - name: Perform install and test the Windows executable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ needs.get-tag.outputs.TAG_NAME }} --pattern '*.exe'
          ls
          iwr -useb get.scoop.sh | iex
          scoop install gsudo
          ./twilio-${{ needs.get-tag.outputs.TAG_NAME }}.exe /S
          sleep 100
          $env:Path += ";C:\Program Files (x86)\twilio-cli\bin"
          $Env:Path
          cd C:\"Program Files (x86)\twilio-cli"
          dir
          twilio --version
          twilio api --help
