name: Platform Executable Acceptance Testing
on:
  workflow_dispatch:
  workflow_run:
    # wait for Platform Executable Release to complete
    workflows:
      [
        "Windows Executable Release",
      ]
    branches: [main]
    types:
      - completed
env:
  INPUT_OWNER: twilio
  INPUT_REPO: twilio-cli
  INPUT_GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
  INPUT_WAITING_INTERVAL: 10
  INPUT_PROPAGATE_FAILURE: true
  INPUT_TRIGGER_WORKFLOW: false

jobs:
  get-branch:
    name: Get Current Branch Name
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:
      - name: Extract branch name
        id: extract_branch
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  get-tag:
    runs-on: ubuntu-latest
    outputs:
      TAG_NAME: ${{steps.get-tag.outputs.TAG_NAME}}
    steps:
      - uses: actions/checkout@v2
      - name: Getting latest tag
        id: get-tag
        run: |
          git fetch --prune --unshallow
          echo "::set-output name=TAG_NAME::$(git describe --tags $(git rev-list --tags --max-count=1))"

  wait-for-oclif-releases:
    name: Wait for oclif platform executables Release to complete
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [ get-branch, get-tag ]
    outputs:
      FAILURE_TAG_OCLIF: ${{ steps.failure_oclif.outputs.FAILURE_TAG_OCLIF }}
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - name: Wait for Oclif Release
        run: source .github/scripts/trigger-and-wait.sh
        env:
          INPUT_WORKFLOW_FILE_NAME: oclif-release.yml
          INPUT_REF: ${{ needs.get-branch.outputs.branch }}
      - name: Perform install and test on binaries
        id: oclif_acceptance_run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ needs.get-tag.outputs.TAG_NAME }} --pattern '*.deb'
          sudo dpkg -i twilio-${{ needs.get-tag.outputs.TAG_NAME }}.deb
          ls
          twilio --version
          twilio api --help
      - name: setup oclif failure output
        if: failure() || cancelled()
        id: failure_oclif
        run: echo '::set-output name=FAILURE_TAG_OCLIF::true'

  wait-for-windows-releases:
    name: Wait for windows platform executables Release to complete
    runs-on: windows-latest
    needs: [ get-branch, get-tag ]
    continue-on-error: true
    outputs:
      FAILURE_TAG_WINDOWS: ${{ steps.failure_windows.outputs.FAILURE_TAG_WINDOWS }}
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - name: Wait for windows executables Release
        run: bash .github/scripts/trigger-and-wait.sh
        env:
          INPUT_WORKFLOW_FILE_NAME: windows-executable-release.yml
          INPUT_REF: ${{ needs.get-branch.outputs.branch }}
      - name: Perform acceptance install and tests on Windows
        id: windows_acceptance_run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ needs.get-tag.outputs.TAG_NAME }} --pattern '*.exe'
          ls
          iwr -useb get.scoop.sh | iex
          scoop install gsudo
          ./twilio-${{ needs.get-tag.outputs.TAG_NAME }}.exe /S
          sleep 100
          $env:Path += ";C:\Program Files (x86)\twilio-cli\bin"
          $Env:Path
          cd C:\"Program Files (x86)\twilio-cli"
          dir
          twilio --version
          twilio api --help
      - name: setup windows failure output
        if: failure() || cancelled()
        id: failure_windows
        run: echo '::set-output name=FAILURE_TAG_WINDOWS::true'

  wait-for-macos-releases:
    name: Wait for macos platform executables Release to complete
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [ get-branch, get-tag ]
    outputs:
      FAILURE_TAG_MACOS: ${{ steps.failure_macos.outputs.FAILURE_TAG_MACOS }}
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - name: Wait for macos executables Release
        run: source .github/scripts/trigger-and-wait.sh
        env:
          INPUT_WORKFLOW_FILE_NAME: macos-executable-release.yml
          INPUT_REF: ${{ needs.get-branch.outputs.branch }}
      - name: Perform acceptance install and test on binaries
        id: macos_acceptance_run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ needs.get-tag.outputs.TAG_NAME }} --pattern '*.pkg'
          sudo installer -pkg twilio-${{ needs.get-tag.outputs.TAG_NAME }}.pkg -target ~/
          ls
          twilio --version
          twilio api --help
      - name: setup macos failure output
        if: failure() || cancelled()
        id: failure_macos
        run: echo '::set-output name=FAILURE_TAG_MACOS::true'

  wait-for-debian-releases:
    name: Wait for debian platform executables Release to complete
    runs-on: ubuntu-latest
    needs: [ get-branch, get-tag ]
    continue-on-error: true
    outputs:
      FAILURE_TAG_DEBIAN: ${{ steps.failure_debian.outputs.FAILURE_TAG_DEBIAN }}
    steps:
      - name: Checkout cli repo
        uses: actions/checkout@v2
      - name: Wait for debian executables Release
        run: source .github/scripts/trigger-and-wait.sh
        env:
          INPUT_WORKFLOW_FILE_NAME: debian-executable-release.yml
          INPUT_REF: ${{ needs.get-branch.outputs.branch }}
      - name: Perform acceptance install and test on binaries
        id: debian_acceptance_run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ needs.get-tag.outputs.TAG_NAME }} --pattern '*.deb'
          sudo dpkg -i twilio-${{ needs.get-tag.outputs.TAG_NAME }}.deb
          ls
          twilio --version
          twilio api --help
      - name: setup debian failure output
        if: failure() || cancelled()
        id: failure_debian
        run: echo '::set-output name=FAILURE_TAG_DEBIAN::true'

  notify-complete-fail:
    needs: [wait-for-oclif-releases, wait-for-windows-releases, wait-for-debian-releases, wait-for-macos-releases]
    name: Notify Release Failed
    runs-on: ubuntu-latest
    if: ${{ ( needs.wait-for-macos-releases.outputs.FAILURE_TAG_MACOS == 'true' ) || ( needs.wait-for-windows-releases.outputs.FAILURE_TAG_WINDOWS == 'true' ) || ( needs.wait-for-oclif-releases.outputs.FAILURE_TAG_OCLIF  == 'true' ) || ( needs.wait-for-debian-releases.outputs.FAILURE_TAG_DEBIAN == 'true') }}
    steps:
      - uses: actions/checkout@v2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.ALERT_SLACK_WEB_HOOK }}
          SLACK_COLOR: "#ff3333"
          SLACK_USERNAME: CLI Release Bot
          SLACK_ICON_EMOJI: ":ship:"
          SLACK_TITLE: "Twilio Cli"
          SLACK_MESSAGE: 'CLI acceptance workflow Failed'
      - name: Fail in case all jobs failed
        if: ${{ ( needs.wait-for-macos-releases.outputs.FAILURE_TAG_MACOS == 'true' ) && ( needs.wait-for-windows-releases.outputs.FAILURE_TAG_WINDOWS == 'true' ) && ( needs.wait-for-oclif-releases.outputs.FAILURE_TAG_OCLIF  == 'true' ) && ( needs.wait-for-debian-releases.outputs.FAILURE_TAG_DEBIAN == 'true') }}
        run:
          exit 1
